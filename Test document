### Test document

The testing can be avhieved by pressing the play button on testing.py or writing "python -m unittest testing.py" within a command shelld like command prompt

### The test itself

The test has the 3 phases - first one is that first the A.I plays against the and opponent who plays completly random moves, second is where the A.I plays against an
algorithm that just tries to stop from the A.I from winning and the third one is where the A.I plays against itself. Each step has 5 loops meaning it goes through 5 times. 
In the end you should get the following result - 

Player 2 wins!
Against random inputs, takes turns on average =  10.0
Against the bad algorithm, takes turns on average =  12.0
Against the AI, takes turns on average=  31.0
.
----------------------------------------------------------------------
Ran 3 tests in 21.727s

OK

----------------------------------------------------------------------

The test will turn FAILED only if it looses (if PLAYER 1 wins), if it is a draw or a win for the A.I it turns true and the test will be OK. With this sort of application, it is 
possible to tweak the algorithm later to play even better.
In this case it is clear that the A.I works as it is expected since it wins the opponent playing random moves within 10 moves on average than it would win against 
itself which is 31 moves.
(Obvisouly it can be made better)

---------------------------------------------------------------------------------------------------------------------------------------------------------------

### The ecciency of the minimax algorithm.

The main idea of the algorithm is to find the optimal move using data pruning. The algorithm has 3 steps - first one evaluates the positions, if it is a win, loss or a draw 
it gives back the according value. The second step is maxvalue, where in this case the A.I, tries to go through all the possible positions that could be played and evaluates 
them and picks the one the has the lickily hood of winning or stopping opponent from winning. The minvalue however, is the the same as maxvalue, but from the our perspective as the
player (Player 1).

If we would run the code and by using the time to measure it takes for each step.

[1.0, (3, -9), 1.0595030784606934]
[2.0, (6, -8), 0.6449146270751953]
[3.0, (4, -8), 0.681206464767456]
[4.0, (3, -10), 0.8197884559631348]
[5.0, (4, -3), 1.399440050125122]
[6.0, (5, -1), 0.5290942192077637]
[7.0, (3, 3), 0.6684725284576416]
[8.0, (4, 3), 0.81569504737854]
[9.0, (4, 8), 0.4796924591064453]
[10.0, (2, inf), 0.027951478958129883]]

This is a game against a random input module, where the A.I won - first tuple shows which move is it for the A.I, second shows what moves was ultimately chosen, third one shows the evulation of the move,
and fourth one gives time.
As we already clearly see that the A.I is really careful (a passive player) that tries to counterfeit the opponent. As it is siin on move 1, the A.I thinks it needs to already
defend itself from the opponent winning (a minus -9) value and choosing the value, took 1 second.
However, as time goes by, the A.I from move 7 already understands, that it actually might winning for IT and it start giving positive numbers (winning game) and 
the time in finding the winning move is faster than finding a loosing move.
As soon as it find a win in the end as in move 10, it return positive infinitive value with time 0.02 and makes the win.
-------------------------------------------------------------------------------------------------------------
