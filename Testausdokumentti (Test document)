## Peformacne test

The idea behind performance test is to see how fast the algorithm runs through a certain depths!
As it seen from the graph (in the main page at github -tamekasra) show that the complexity and 
the time run via each depth is exponential!

The performance test can be run via performance.py or via command shell " python run performance.py"


## Coverage

Coverage is used to check whether the code is clean - meaning the there is non-necessary codes that are not being used.
The coverage can be doen using unittest coverage by inputing the following code - 
"" python -m coverage run Testing.possible.scenarios.py "" or 
"" python -m coverage run Testing.possible.scenarios.py"" or 
"" python -m coverage run Testing.possible.scenarios.py ""

and after that we can view it by using 

""" python -m coverage report -m """



##Test document

The testings can be achieved by pressing the play button on testing.py or writing
"python -m unittest testing.against.random.input.py", "python -m unittest Testing.against.random.input.py" or  
"python -m unittest Testing.possible.scenarios.py" within a command shell like command prompt (or testing2.py or testing3.py)

###The tests itself

1) Testing.py - The test has the 3 phases - first one is that first the A.I plays against the and opponent who plays completly random moves, second is where the A.I plays against an
algorithm that just tries to stop from the A.I from winning and the third one is where the A.I plays against itself. Each step has 5 loops meaning it goes through 5 
times. 
In the end you should get the following result - 

Player 2 wins!
Against random inputs, takes turns on average =  10.0
Against the bad algorithm, takes turns on average =  12.0
Against the AI, takes turns on average=  31.0
.
----------------------------------------------------------------------
Ran 3 tests in 21.727s

OK

----------------------------------------------------------------------

The test will turn FAILED only if it looses (if PLAYER 1 wins), if it is a draw or a win for the A.I it turns true and the test will be OK. With this sort of 
application, it is  possible to tweak the algorithm later to play even better.
In this case it is clear that the A.I works as it is expected since it wins the opponent playing random moves within 10 moves on average than it would win against 
itself which is 31 moves.
(Obvisouly it can be made better)

---------------------------------------------------------------------------------------------------------------------------------------------------------------

###The effiency of the minimax algorithm.

The main idea of the algorithm is to find the optimal move using data pruning. The algorithm has 3 steps - first one evaluates the positions, if it is a win, loss 
or a draw it gives back the according value. The second step is maxvalue, where in this case the A.I, tries to go through all the possible positions that could be 
played and evaluates them and picks the one the has the likelyhood of winning or stoping opponent from winning. The minvalue however, is the the same as maxvalue,
but from the our perspective as the player (Player 1).

If we would run the code and by using the time to measure it takes for each step.

[1.0, (3, -9), 1.0595030784606934]
[2.0, (6, -8), 0.6449146270751953]
[3.0, (4, -8), 0.681206464767456]
[4.0, (3, -10), 0.8197884559631348]
[5.0, (4, -3), 1.399440050125122]
[6.0, (5, -1), 0.5290942192077637]
[7.0, (3, 3), 0.6684725284576416]
[8.0, (4, 3), 0.81569504737854]
[9.0, (4, 8), 0.4796924591064453]
[10.0, (2, inf), 0.027951478958129883]]

This is a game against a random input module, where the A.I won - first tuple shows which move is it for the A.I, second shows what moves was ultimately chosen, 
third one shows the evulation of the move, and fourth one gives time.
As we already clearly see that the A.I is really careful (a passive player) that tries to counterfeit the opponent. As it is seen on move 1, the A.I thinks it needs
to already defend itself from the opponent winning (a minus -9) value and choosing the value, took 1 second.
However, as time goes by, the A.I from move 7 already understands, that it actually might winning for IT and it start giving positive numbers (winning game) and 
the time in finding the winning move is faster than finding a loosing move.
As soon as it find a win in the end as in move 10, it return positive infinitive value with time 0.02 (because it is evaluated using 1 recursion) and makes the win.
-------------------------------------------------------------------------------------------------------------


2) Testing2.py - The test goes through many winning positions - The A.I has to find the the winning position in 1, 2 and in 5 moves. Furthermor, it also tests if it block the opponents winning move in order to avoid a loss. 
 
-The simple find winning move in 1 has also opponents winning move, so A.I has to choose between to block oppoents move or 
win straight away - luckily in our algorithm it goes straight for the win!
-The move in 2 tests idea is to whether the algorithm finds the winning move in two. It puts the piece in a place where 
the opponent has to block, which it does, and after that it goes for the win!
-The move 5 was taken from a video (https://www.youtube.com/watch?v=yDWPi1pZ0Po) where it was explained that this is a winning move in 5 - There are 2^4 possible plays, but only 1 is winning. If we just put the loop as a value of 5, it sadly does not find it, but if the increase the depth value (how many moves it tries to solve further), it luckily finds the winning strike!

----------------------------------------------------------------------------------------------------------------------------------

3) Testing3.py - The main principle or an idea is that, the test puts two A.I to play against each other. The player or A.I
that starts first has the depth only 3 and the second A.I that starts secondly has a depth of 7. 
Since the stronger A.I (longer depth value) has to start second, it is a lot harder to win compared to starting first.
So the idea is to see whether we have a bigger value actually wins a the second player and how long it takes! 

We got the results as follows by just playing 2 games:
    Number of games drawn or won by the weaker A.i was only  1 - time taken on average per game -  0.7570380568504333 seconds 
    Number of games won by the best A.I was - 19 with the average time taken per game - 91.132177734375 seconds

Thus, out of 20 games, despite the second algorithm starting as the second player, won 19 games in total out of 20, where as 
a draw or a win for the weaker A.I was just only 1.

Therefor, the algorithm is ALMOST perfect! (Honestly have no idea how to make it better.....)


Furthermore, the coverage testing for each test are done using the command '''python -m coverage run Testing.against.random.input.py '''

The coverage pictures are given on the main page in github (tammekasra) and most of the coverage shows 70-80% meaning that 
some code is not being used - however, each of the 3 tests overlap each other, meaning that those actually use a sub part of each 
code, and thus the coverage is not perfect...
